(()=>{var t,e={841:(t,e,s)=>{"use strict";s.r(e)},166:(t,e,s)=>{"use strict";s.r(e)},176:(t,e,s)=>{"use strict";s.r(e)},986:(t,e,s)=>{"use strict";s.r(e)},811:(t,e,s)=>{"use strict";s.r(e)},231:(t,e,s)=>{"use strict";s.r(e)},599:(t,e,s)=>{"use strict";s.r(e)},476:(t,e,s)=>{"use strict";s.r(e)},238:(t,e,s)=>{"use strict";s.r(e)},997:(t,e,s)=>{"use strict";s.r(e)},278:(t,e,s)=>{"use strict";s.r(e)},624:(t,e,s)=>{"use strict";s.r(e)},755:(t,e,s)=>{"use strict";s.r(e)},953:(t,e,s)=>{"use strict";s.r(e)},95:(t,e,s)=>{"use strict";s.r(e)},190:(t,e,s)=>{"use strict";s.r(e)},980:(t,e,s)=>{"use strict";s.r(e)},115:(t,e,s)=>{"use strict";s.r(e)},766:(t,e,s)=>{"use strict";s.r(e)},729:(t,e,s)=>{"use strict";s.r(e)},860:(t,e,s)=>{"use strict";s.r(e)},60:(t,e,s)=>{"use strict";s.r(e)},955:(t,e,s)=>{"use strict";s.r(e)},361:(t,e,s)=>{"use strict";s.r(e)},243:(t,e,s)=>{"use strict";s.r(e)},902:(t,e,s)=>{"use strict";s.r(e)},347:(t,e,s)=>{"use strict";s.r(e)},704:()=>{class t{constructor(t){this.borderedButton=t,this.button=t.querySelector(".bordered-button__button"),this.bindListeners()}bindListeners(){this.button.addEventListener("focus",this.handleButtonFocus.bind(this)),this.button.addEventListener("blur",this.handleButtonBlur.bind(this))}handleButtonFocus(){this.borderedButton.classList.add("bordered-button_focused")}handleButtonBlur(){this.borderedButton.classList.remove("bordered-button_focused")}}document.querySelectorAll(".bordered-button").forEach((e=>new t(e)))},845:(t,e,s)=>{"use strict";s.r(e),s.d(e,{Tables:()=>i});class i{constructor(t){this.tables=t,this.index=0,this.rowSize=this.tables[0].rows[0].cells.length,this.lastCellIndex=this.rowSize-1}decreaseIndex(){0!==this.index&&(this.index-=1)}increaseIndex(){this.index!==this.tables.length-1&&(this.index+=1)}*genCoordsInOrder(t,e,s=(()=>!0)){let i=t;for(;s(i,e);)yield i,i=this.getNextCoord(i)}getCoordsForward(t,e){return 0===e?t:this.getCoordsForward(this.getNextCoord(t),--e)}getCoordsAgo(t,e){return 0===e?t:this.getCoordsAgo(this.getPrevCoord(t),--e)}getNextCoord(t){return t[2]<this.lastCellIndex?[t[0],t[1],t[2]+1]:this.getCell([t[0],t[1]+1,0])?[t[0],t[1]+1,0]:[t[0]+1,0,0]}getPrevCoord(t){return t[2]>0?[t[0],t[1],t[2]-1]:t[1]>0?[t[0],t[1]-1,this.lastCellIndex]:[t[0]-1,this.getLastRowIndex(t[0]-1),this.lastCellIndex]}getLastCellCoord(t){return[t,this.getLastRowIndex(t),6]}getLastRowIndex(t){return this.getNRows(t)-1}getNRows(t){return this.tables[t].rows.length}getElemCoord(t){return[this.index,t.closest("tr").rowIndex,t.closest("td").cellIndex]}getCoord(t,e){return[t,Math.floor((e-1)/this.rowSize),(e-1)%this.rowSize]}getCell(t){return this.tables[t[0]]?.rows[t[1]]?.cells[t[2]]}static getMinCoord(t,e){return i.makeUnnumerical(Math.min(i.makeNumerical(t),i.makeNumerical(e)))}static compareCoord(t,e){return i.makeNumerical(t)-i.makeNumerical(e)}static isCoordEqual(t,e){return i.makeNumerical(t)===i.makeNumerical(e)}static isCoordMore(t,e){return i.makeNumerical(t)>i.makeNumerical(e)}static isCoordLess(t,e){return i.makeNumerical(t)<i.makeNumerical(e)}static isCoordLessOrEqual(t,e){return i.makeNumerical(t)<=i.makeNumerical(e)}static makeUnnumerical(t){return i.fillCoord(String(t).split("").map(Number))}static fillCoord(t,e=t.length){return e>=3?t:i.fillCoord([0,...t],++e)}static makeNumerical(t){return+t.reduce(((t,e)=>t+e),"")}static getLastItem(t){return t[t.length-1]}}},972:(t,e,s)=>{"use strict";s.r(e);var i=s(845);class n extends i.Tables{constructor(t){super(t.getElementsByClassName("js-cal__main-table")),this.root=t,this.monthFormater=new Intl.DateTimeFormat("ru",{month:"long"}),this.readyDateEvent=new CustomEvent("ready-date",{bubbles:!0,detail:"date range is ready (start and end range data filled)"}),this.nextMonthBtn=this.root.querySelector(".js-cal__next-month-btn"),this.cancleBtn=this.root.querySelector(".js-cal__cancle-btn"),this.tableContainer=this.root.querySelector(".js-cal__table-container"),this.error=this.root.querySelector(".js-cal__error"),this.errorMessage=this.error.innerText,this.error.innerText="",this.template=this.tableContainer.innerHTML,this.monthDisplay=this.root.querySelector(".js-cal__month"),this.yearDisplay=this.root.querySelector(".js-cal__year"),this.step=parseInt(getComputedStyle(this.tableContainer).width),this.rangeCounter=0,this.range=[],this.startRange=[],this.endRange=[],this.selectedMod="cal__day_selected",this.startRangeMod="cal__day_start-range",this.endRangeMod="cal__day_end-range",this.selectedBtnMod="cal__day-btn_selected",this.nextMonthBtnMod="cal__day-btn_next-month",this.prevMonthBtnMod="cal__day-btn_prev-month",this.todayBtnMod="cal__day-btn_todays",this.hash=this.root.dataset.hash||(this.root.dataset.hash="cal0"),this.initDates=this.getInitDates(),this.root.dataset.date=this.initDates.date||"";const e=new Date(this.initDates.date||Date());this.year=e.getFullYear(),this.month=e.getMonth(),this.init(e)}getInitDates(){const t=this.root.dataset,e=t.date||t.startDate?t:JSON.parse(sessionStorage.getItem(this.hash));return{date:e?.date,startDate:e?.startDate,endDate:e?.endDate}}init(t){this.modifyTodaysBtn(t),this.disableBtsn(t),this.fillTable(this.index),this.clearTable(this.index),this.bindListenerOnLastBtn(this.index),this.insertFillClearTable(this.index+1),this.updateMonthDisplayValue(),this.updateYearDisplayValue(),this.bindListeners(),n.checkDateIsValid(this.initDates.startDate)||(this.setInitialRange(this.initDates.startDate),n.checkDateIsValid(this.initDates.endDate)||this.setInitialRange(this.initDates.endDate))}modifyTodaysBtn(t){this.getButton(this.getCoord(0,this.getPrevMonthNDay(0)+t.getDate())).classList.add(this.todayBtnMod)}disableBtsn(t){[...this.genCoordsInOrder([0,0,0],this.getCoord(0,this.getPrevMonthNDay(0)+t.getDate()),i.Tables.isCoordLess)].forEach((t=>this.getButton(t).disabled=!0))}setInitialRange(t){const e=new Date(t),s=this.getIndex(e);this.insertFillClearTableNthTimes(s);const i=this.getCoord(s,this.getPrevMonthNDay(s)+e.getDate()),n=this.getButton(i);this.index=s,n.click(),this.index=0}getIndex(t){return 12*(t.getFullYear()-this.year)-this.month+t.getMonth()}insertFillClearTableNthTimes(t){if(t)for(;this.tables.length!=t+2;)this.insertFillClearTable(this.tables.length)}insertFillClearTable(t){this.insertTemplate(),this.fillTable(t),this.clearTable(t),this.bindListenerOnLastBtn(t),this.bindListenerOnFirstBtn(t)}updateMonthDisplayValue(){this.monthDisplay.innerText=this.monthFormater.format(new Date(this.year,this.month+this.index)).replace(/^./,(t=>t.toUpperCase()))}updateYearDisplayValue(){this.yearDisplay.innerText=new Date(this.year,this.month+this.index).getFullYear()}bindListeners(){this.root.querySelector(".js-cal__prev-month-btn").addEventListener("click",this.handlePrevMonthBtnClick.bind(this)),this.nextMonthBtn.addEventListener("click",this.handleNextMonthBtnClick.bind(this)),this.nextMonthBtn.addEventListener("keydown",this.handleNextMonthBtnKeydown.bind(this)),this.cancleBtn.addEventListener("click",this.handleCancleBtnClick.bind(this)),this.cancleBtn.addEventListener("keydown",this.handleCancleBtnKeydown.bind(this)),this.root.querySelector(".js-cal__apply-btn").addEventListener("click",this.handleApplyBtnClick.bind(this)),this.tableContainer.addEventListener("click",this.handleTableContainerClick.bind(this))}bindListenerOnLastBtn(t){this.getButton(this.getLastCellCoord(t)).addEventListener("keydown",this.handleLastDayBtnKeydown.bind(this))}bindListenerOnFirstBtn(t){this.getButton([t,0,0]).addEventListener("keydown",this.handleFirstDayBtnKeydown.bind(this))}handlePrevMonthBtnClick(){0!=this.index&&(this.decreaseIndex(),this.changeDisplayedMonth(),this.updateMonthDisplayValue(),this.updateYearDisplayValue())}handleNextMonthBtnClick(){this.increaseIndex(),this.changeDisplayedMonth(),this.updateMonthDisplayValue(),this.updateYearDisplayValue(),this.index===this.tables.length-1&&this.insertFillClearTable(this.index+1)}handleCancleBtnClick(){this.clearRange(),this.clearRangeData()}handleApplyBtnClick(){this.setSessStorDate(),this.error.innerText=this.errorMessage,this.isEndRange()&&(this.root.dispatchEvent(this.readyDateEvent),this.error.innerText="")}setSessStorDate(){sessionStorage.setItem(this.hash,JSON.stringify({date:this.root.dataset.date,startDate:this.root.dataset.startDate,endDate:this.root.dataset.endDate}))}handleLastDayBtnKeydown(t){"Tab"!==t.code||t.shiftKey||(t.preventDefault(),this.cancleBtn.firstElementChild.focus())}handleFirstDayBtnKeydown(t){"Tab"===t.code&&t.shiftKey&&(t.preventDefault(),this.nextMonthBtn.focus())}handleCancleBtnKeydown(t){"Tab"===t.code&&t.shiftKey&&(t.preventDefault(),this.getButton(this.getLastCellCoord(this.index)).focus())}handleNextMonthBtnKeydown(t){"Tab"!==t.code||t.shiftKey||0===this.index||(t.preventDefault(),this.getButton([this.index,0,0]).focus())}handleTableContainerClick(t){const e=t.target;if(!e.classList.contains("cal__day-btn"))return;if(!1===e.classList.toggle(this.selectedBtnMod))return this.clearRange(),this.clearRangeData(),void this.removeDataIsReady();this.isEndRange()&&(this.clearRange(),this.clearRangeData()),this.rangeCounter+=1;const s=this.getElemCoord(e),i=this.getButton([s[0],s[1],0]),n=this.getButton([s[0],s[1],6]);this.addCoordInRange(s);const a=e.classList.contains(this.prevMonthBtnMod),r=e.classList.contains(this.nextMonthBtnMod),o=i.classList.contains(this.prevMonthBtnMod),l=n.classList.contains(this.nextMonthBtnMod);(a||o)&&this.index>0&&this.addCoordInRange(this.getCoordsAgo(s,7)),(r||l)&&this.addCoordInRange(this.getCoordsForward(s,7)),this.selectLastRangeBtn(),this.removeDataIsReady(),this.isEndRange()&&(this.orderRange(),this.drawRange(this.range[0]),this.fixOrderRange(),this.modifyRangeCells(),this.setDataIsReady()),this.setRangeData()}drawRange(t){const e=this.searchNextRangeCoord(this.drawPartOfRange(this.genCoordsInOrder(t,this.searchNextRangeCoord(t)||i.Tables.getLastItem(this.range),this.getButton([t[0],t[1],6]).classList.contains(this.nextMonthBtnMod)?(s=i.Tables.getMinCoord(this.getLastCellCoord(t[0]),this.range[1]),t=>i.Tables.isCoordLessOrEqual(t,s)):i.Tables.isCoordLessOrEqual)));var s;e&&this.drawRange(i.Tables.isCoordEqual(e,i.Tables.getLastItem(this.range))?[i.Tables.getLastItem(this.range)[0],0,0]:e)}searchNextRangeCoord(t){return this.range.find((e=>i.Tables.isCoordMore(e,t)))}drawPartOfRange(t){const e=[...t];return e.forEach((t=>this.getCell(t).classList.add(this.selectedMod))),i.Tables.getLastItem(e)}fixOrderRange(){this.startRange.sort(i.Tables.compareCoord),this.endRange.sort(i.Tables.compareCoord);const t=this.startRange;i.Tables.isCoordLess(this.startRange[0],this.endRange[0])||(this.startRange=this.endRange,this.endRange=t)}modifyRangeCells(){this.startRange.forEach((t=>{const e=this.getCell(t);e.classList.remove(this.selectedMod),e.classList.add(this.startRangeMod)})),this.endRange.forEach((t=>{const e=this.getCell(t);e.classList.remove(this.selectedMod),e.classList.add(this.endRangeMod)}))}clearRange(){2===this.rangeCounter&&[...this.genCoordsInOrder(this.range[0],i.Tables.getLastItem(this.range),i.Tables.isCoordLessOrEqual)].forEach((t=>this.getCell(t).classList.remove(this.selectedMod))),[...this.startRange,...this.endRange].forEach((t=>{const e=this.getCell(t);e.classList.remove(this.startRangeMod),e.classList.remove(this.endRangeMod),this.getButton(t).classList.remove(this.selectedBtnMod)})),this.rangeCounter=0,this.range=[],this.startRange=[],this.endRange=[]}setRangeData(){this.root.dataset.startDate=n.formatDate(this.getDateFromCoord(this.startRange.find(this.isPresentDayBtn.bind(this)))),0!=this.endRange.length&&(this.root.dataset.endDate=n.formatDate(this.getDateFromCoord(this.endRange.find(this.isPresentDayBtn.bind(this)))))}clearRangeData(){this.root.dataset.startDate="",this.root.dataset.endDate=""}setDataIsReady(){this.root.setAttribute("data-date-is-ready","")}removeDataIsReady(){this.root.removeAttribute("data-date-is-ready")}isPresentDayBtn(t){const e=this.getButton(t),s=e.classList.contains(this.nextMonthBtnMod),i=e.classList.contains(this.prevMonthBtnMod);return!(s||i)}addCoordInRange(t){this.getLastRange().push(t)}selectLastRangeBtn(){this.getButton(i.Tables.getLastItem(this.getLastRange())).classList.add(this.selectedBtnMod)}getLastRange(){return this.isStartRange()?this.startRange:this.endRange}isStartRange(){return 1===this.rangeCounter}isEndRange(){return 2===this.rangeCounter}orderRange(){this.range=[...this.startRange,...this.endRange].sort(i.Tables.compareCoord)}changeDisplayedMonth(){this.tables[0].style.marginLeft=-this.index*this.step+"px"}fillTable(t){const e=this.genCoordsInOrder([t,0,0],[t,this.getLastRowIndex(t),6]);n.getPrevMonthDay(n.getMonthLastDay(this.year,this.month+t-1),this.getPrevMonthNDay(t)).forEach((t=>{const s=this.getButton(e.next().value);s.innerText=t,s.classList.add(this.prevMonthBtnMod)})),n.getPresentDay(this.getPresentNDay(t)).forEach((t=>this.getButton(e.next().value).innerText=t)),n.getNextMonthDay(this.getNextMonthNDay(t)).forEach((t=>{const s=this.getButton(e.next().value);s.innerText=t,s.classList.add(this.nextMonthBtnMod)}))}clearTable(t){const e=Math.ceil((this.getPrevMonthNDay(t)+this.getPresentNDay(t))/7);for(let s=5;s>=e;s--)this.tables[t].rows[s].remove()}insertTemplate(){this.tableContainer.insertAdjacentHTML("beforeend",this.template)}getNextMonthNDay(t){return 7-n.getWeekDay(this.year,this.month+t,n.getMonthLastDay(this.year,this.month+t))}getPresentNDay(t){return n.getMonthLastDay(this.year,this.month+t)}getPrevMonthNDay(t){return n.getWeekDay(this.year,this.month+t)-1}getButton(t){return this.getCell(t).firstElementChild}getDateFromCoord(t){return new Date(this.year,this.month+t[0],7*t[1]+t[2]+1-this.getPrevMonthNDay(t[0]))}static checkDateIsValid(t){return"Invalid Date"===new Date(t).toString()}static getNextMonthDay(t){return Array(t).fill(1).map(((t,e)=>t+e))}static getPresentDay(t){return[...Array(t).keys()].map((t=>t+1))}static getPrevMonthDay(t,e){return Array(e).fill(t).map(((t,e)=>t-e)).reverse()}static getWeekDay(t,e,s=1){return new Date(t,e,s).getDay()||7}static getMonthLastDay(t,e){return new Date(t,e+1,0).getDate()}static formatDate(t){return`${t.getFullYear()}-${t.getMonth()+1}-${t.getDate()}`}}window.addEventListener("load",(()=>document.querySelectorAll(".js-cal").forEach((t=>new n(t)))))},403:()=>{class t{constructor(t){this.root=t,this.button=this.root.querySelector(".check-list__button"),this.bindListeners()}bindListeners(){this.button.addEventListener("click",(()=>this.handleButtonClick()))}handleButtonClick(){this.root.classList.toggle("check-list_open")}}document.querySelectorAll(".check-list").forEach((e=>new t(e)))},645:()=>{class t{constructor(t){this.dateFormater=new Intl.DateTimeFormat("ru"),this.calWrapper=t.querySelector(".js-date-dropdown__cal-wrapper"),this.cal=this.calWrapper.firstElementChild,this.startBtn=t.querySelector(".js-date-dropdown__start-btn"),this.endBtn=t.querySelector(".js-date-dropdown__end-btn"),this.startSignature=this.startBtn.querySelector(".js-date-dropdown__date-signature"),this.endSignature=this.endBtn.querySelector(".js-date-dropdown__date-signature"),this.mask=this.startSignature.innerText,this.endMask=this.endSignature.innerText,this.observer=new MutationObserver(this.handleCalAttrsChanges.bind(this)),this.observer.observe(this.cal,{attributes:!0}),this.bindListeners(),this.handleCalAttrsChanges()}handleCalAttrsChanges(){this.handleCalStartAttrsChanges(),this.handleCalEndAttrsChanges()}handleCalStartAttrsChanges(){this.updateStartSignature(new Date(this.getStartDate()))}handleCalEndAttrsChanges(){this.updateEndSignature(new Date(this.getEndDate()))}updateStartSignature(t){this.checkDate(t)?this.changeStartDateSignatyre(this.mask):this.changeStartDateSignatyre(this.formateDate(t))}updateEndSignature(t){this.checkDate(t)?this.changeEndDateSignatyre(this.endMask):this.changeEndDateSignatyre(this.formateDate(t))}getStartDate(){return this.cal.dataset.startDate}getEndDate(){return this.cal.dataset.endDate}checkDate(t){return"Invalid Date"===t.toString()}formateDate(t){return this.dateFormater.format(t)}changeStartDateSignatyre(t){this.startSignature.innerText=t}changeEndDateSignatyre(t){this.endSignature.innerText=t}bindListeners(){this.startBtn.addEventListener("click",this.handleBtnClick.bind(this)),this.endBtn.addEventListener("click",this.handleBtnClick.bind(this)),this.calWrapper.addEventListener("ready-date",this.handleBtnClick.bind(this))}handleBtnClick(){this.calWrapper.classList.toggle("date-dropdown__cal-wrapper_hidden")}}document.querySelectorAll(".js-date-dropdown").forEach((e=>new t(e)))},257:(t,e,s)=>{"use strict";s.r(e);var i,n,a=s(226),r=s(943);class o{constructor(t,e={}){this.glossary=new a.default(e),this.dropdown=t,this.expandButton=t.querySelector(".js-dropdown__expand-button"),this.signature=t.querySelector(".js-dropdown__signature"),this.defaultSignature=this.signature.innerText,this.list=t.querySelector(".js-dropdown__list"),this.decreaseButtons=t.querySelectorAll(".js-dropdown__decrease-button"),this.increaseButtons=t.querySelectorAll(".js-dropdown__increase-button"),this.counters=[...t.querySelectorAll(".js-dropdown__counter")],this.sectionNames=Array.from(t.querySelectorAll(".js-dropdown__section-name"),(t=>t.innerText)),this.applyButton=t.querySelector(".js-dropdown__apply-button"),this.cancelButton=t.querySelector(".js-dropdown__cancel-button"),this.row=0,this.value=0,this.countersSum=0,this.signatureInterfaces=this.getSignatureInterfaces(),this.bindListeners(),this.hash=this.dropdown.dataset.hash,this.setCounterValues(this.getInitValues()),this.dropdown.hasAttribute("data-open")&&this.expandButton.click()}getSignatureInterfaces(){return this.glossary.terms.reduce(((t,e)=>{const s=e.split("+");return[...t,{getValue:()=>s.reduce(((t,e)=>+this.counters[this.sectionNames.indexOf(e)].innerText+t),0),getName:()=>this.sectionNames.find((t=>t===s[0]))}]}),[])}getInitValues(){return this.dropdown.dataset.counterValues||sessionStorage.getItem(this.hash)||""}bindListeners(){this.expandButton.addEventListener("click",this.handleExpandButtonClick.bind(this)),this.decreaseButtons.forEach((t=>t.addEventListener("click",this.handleDecreaseButtonClick.bind(this)))),this.increaseButtons.forEach((t=>t.addEventListener("click",this.handleIncreaseButtonClick.bind(this)))),this.applyButton&&this.applyButton.addEventListener("click",this.handeApplyButtonClick.bind(this)),this.cancelButton&&this.cancelButton.addEventListener("click",this.handleCancelButtonClick.bind(this))}handleExpandButtonClick(){this.expandButton.classList.toggle("dropdown__expand-button_pressed"),this.list.classList.toggle("dropdown__list_hidden")}handleDecreaseButtonClick(t){this.update(t.target),0!==this.value&&(1===this.value&&this.toggleDecreaseButtonMod(),this.changeCounterValue(-1),this.updateSignature(this.signatureInterfaces),this.countersSum-=1,0===this.countersSum&&this.toggleCancelButtonMod())}handleIncreaseButtonClick(t){this.update(t.target),0===this.value&&this.toggleDecreaseButtonMod(),this.changeCounterValue(1),this.updateSignature(this.signatureInterfaces),this.countersSum+=1,1===this.countersSum&&this.toggleCancelButtonMod()}handeApplyButtonClick(){this.expandButton.classList.toggle("dropdown__expand-button_pressed"),this.list.classList.toggle("dropdown__list_hidden"),this.hash&&sessionStorage.setItem(this.hash,this.counters.reduce(((t,e)=>`${t} ${e.innerText}`),""))}handleCancelButtonClick(){this.resetCounters(),this.countersSum=0,this.signature.innerText=this.defaultSignature,this.addDecreseButtonsMod(),this.toggleCancelButtonMod()}setCounterValues(t){(t.match(/\d+/g)||[]).forEach(((t,e)=>this.clickOnButtonNthTimes(+t,this.increaseButtons[e])))}clickOnButtonNthTimes(t,e){t<=0||(e.click(),this.clickOnButtonNthTimes(--t,e))}changeCounterValue(t){return this.counters[this.row].innerText=this.value+t}resetCounters(){this.counters.forEach((t=>t.innerText=0))}toggleDecreaseButtonMod(){this.decreaseButtons[this.row].classList.toggle("dropdown__decrease-button_disabled")}addDecreseButtonsMod(){this.decreaseButtons.forEach((t=>t.classList.add("dropdown__decrease-button_disabled")))}toggleCancelButtonMod(){this.cancelButton&&this.cancelButton.classList.toggle("dropdown__cancel-button_hidden")}updateSignature(t=this.signatureInterfaces){this.signature.innerText=t.reduce(((t,e)=>{const s=e.getValue();if(0===s)return t;const i=`${s} ${this.glossary.getDefinition(e.getName(),s)}`;return""===t?i:`${t}, ${i}`}),"")||this.defaultSignature}getRow(t){return Math.max([...this.decreaseButtons].indexOf(t),[...this.increaseButtons].indexOf(t),0)}update(t){this.row=this.getRow(t),this.value=+this.counters[this.row].innerText}}i=document.querySelectorAll(".js-dropdown"),n=Object.values(r),i.forEach((t=>{return new o(t,n.find((e=t.dataset.glossary.split(", "),t=>{const s=Object.keys(t);return 0==e.filter((t=>-1==s.indexOf(t))).length})));var e}))},226:(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});class i{constructor(t={}){this.glossary=t,this.terms=Object.keys(t)}static checkForm1(t){return 1===t}static checkForm2(t){return t>1&&t<5}static checkForm3(t,e){return 0===t||t>4||e>9&&e<20}static compare(t,e){return e.trim().split("+").find((e=>e===t))}defineShape(t){const e=+String(t).slice(-1);return[i.checkForm1(e),i.checkForm2(e),i.checkForm3(e,+String(t).slice(-2))].lastIndexOf(!0)}findTerm(t){return this.terms.find(i.compare.bind(null,t))}getDefinition(t,e){return(this.glossary[this.findTerm(t)]||[])[this.defineShape(e)]||t}}const n=i},943:(t,e,s)=>{"use strict";s.r(e),s.d(e,{g1:()=>i,g2:()=>n});const i={спальни:["спальня","спальни","спален"],кровати:["кровать","кровати","кроватей"],"ванные комнаты":["ванная комната","ванные комнаты","ванных комнат"]},n={"взрослые+дети":["гость","гостя","гостей"],младенцы:["младенец","младенца","младенцев"]}},200:()=>{class t{constructor(t){this.calWrapper=t.querySelector(".js-filter-date-dropdown__cal-wrapper"),this.cal=this.calWrapper.firstElementChild,this.btn=t.querySelector(".js-filter-date-dropdown__btn"),this.sign=t.querySelector(".js-filter-date-dropdown__sign"),this.dateFormater=new Intl.DateTimeFormat("ru",{day:"numeric",month:"short"}),this.observer=new MutationObserver(this.handleCalAttrsChanges.bind(this)),this.observer.observe(this.cal,{attributes:!0}),this.bindListeners(),this.handleCalAttrsChanges()}handleCalAttrsChanges(){if(this.cal.hasAttribute("data-date-is-ready")){const t=this.cal.dataset;if(""===t.startDate)return;this.sign.innerText=`${this.formateDate(new Date(t.startDate))} - ${this.formateDate(new Date(t.endDate))}`}}bindListeners(){const t=this.handleBtnClick.bind(this);this.btn.addEventListener("click",t),this.calWrapper.addEventListener("ready-date",t)}handleBtnClick(){this.btn.classList.toggle("filter-date-dropdown__btn_pressed"),this.calWrapper.classList.toggle("filter-date-dropdown__cal-wrapper_hidden")}formateDate(t){return this.dateFormater.format(t).slice(0,-1)}}document.querySelectorAll(".js-filter-date-dropdown").forEach((e=>new t(e)))},270:()=>{const t='<svg \n    class="impressions__circle" \n    width="120"\n    height="120"\n    viewBox="-2 0 124 120">\n    <defs>\n      <linearGradient id="amazing" x1="0%" y1="0%" x2="0%" y2="100%">\n        <stop offset="0%" style="stop-color:#FFE39C;stop-opacity:1" />\n        <stop offset="100%" style="stop-color:#FFBA9C;stop-opacity:1" />\n      </linearGradient>\n      <linearGradient id="cool" x1="0%" y1="0%" x2="0%" y2="100%">\n        <stop offset="0%" style="stop-color:#6FCF97;stop-opacity:1" />\n        <stop offset="100%" style="stop-color:#66D2EA;stop-opacity:1" />\n      </linearGradient>\n      <linearGradient id="bad" x1="0%" y1="0%" x2="0%" y2="100%">\n        <stop offset="0%" style="stop-color:#BC9CFF;stop-opacity:1" />\n        <stop offset="100%" style="stop-color:#8BA4F9;stop-opacity:1" />\n      </linearGradient>\n      <linearGradient id="veryBad" x1="0%" y1="0%" x2="0%" y2="100%">\n        <stop offset="0%" style="stop-color:#909090;stop-opacity:1" />\n        <stop offset="100%" style="stop-color:#3D4975;stop-opacity:1" />\n      </linearGradient>\n    </defs> \n  </svg>',e=t=>{const e=document.createElement("div");return e.insertAdjacentHTML("afterbegin",t),e.firstChild},s=t=>e=>(t.insertAdjacentHTML("beforeend",e),t),i=t=>{const{amazing:e=0,cool:s=0,bad:i=0,veryBad:n=0}=t.dataset;return[+e,+s,+i,+n]},n=t=>t.reduce(((t,e)=>t+e)),a=t=>({0:"amazing",1:"cool",2:"bad",3:"veryBad"}[t]),r=t=>e=>s=>{const i=s(e);return r(t(i))(i)};document.querySelectorAll(".js-impressions__circle-container").forEach((o=>{return h=o,r((l=4,i=>n=>r=>o=>n.insertAdjacentElement("beforeend",(t=>e=>(e.insertAdjacentHTML("beforeend",`<text \n      class="impressions__room-number" \n      text-anchor="middle" \n      x="60" \n      y="65" \n      fill="url(#bad)">${t}\n    </text>\n    <text \n      class="impressions__room-votes" \n      text-anchor="middle" \n      x="60" \n      y="81" \n      fill="url(#bad)">голосов\n    </text>`),e))(o)(1==r.filter((t=>t)).length?s(e(t))((t=>e=>`<circle cx=${t} cy=${t} r=${t} \n  stroke=url(#${a(e.findIndex((t=>t)))}) \n  stroke-width="4" fill="none"/>`)(i)(r)):r.map((t=>e=>s=>s/t*e)(o)((t=>e=>360-t*e)(l)((t=>t.filter((t=>t)).length)(r)))).reduce(((t,e,n,r)=>0==e?t:s(t)((t=>e=>s=>i=>(n,r,o)=>`<path \n      class=${a(r)}\n      d="M${i(s(n,r,o))} \n        A${e} ${e} 0 ${n>180?1:0}\n        0 ${i((s(n,r+1,o)||360+t/2)-t,e)}" \n      fill="none"\n      stroke=url(#${a(r)})\n      stroke-width="4"\n     />`)(l)(i)((t=>(e,s,i)=>i.slice(0,s).filter((t=>t)).reduce(((e,s)=>e+s+t),t/2))(l))((t=>e=>{const s=(e+90)*Math.PI/180;return t*Math.cos(s)+t+" "+Math.abs(t*Math.sin(s)-t)})(i))(e,n,r))),e(t)))))(60)(h))(h)(i)(n);var l,h}))},881:()=>{class t{constructor(t){this.like=t,this.counter=this.like.querySelector(".js-like__counter"),this.btn=this.like.querySelector(".js-like__btn"),this.bindListeners()}bindListeners(){this.like.addEventListener("click",this.handleLikeClick.bind(this)),this.btn.addEventListener("focus",this.handleBtnFocus.bind(this)),this.btn.addEventListener("blur",this.handleBtnBlur.bind(this))}handleLikeClick(){this.like.classList.toggle("like_pressed")?this.counter.innerText-=-1:this.counter.innerText-=1,this.handleBtnFocus()}handleBtnFocus(){this.handleBtnBlur(),this.like.classList.contains("like_pressed")?this.like.classList.add("like_focused-pressed"):this.like.classList.add("like_focused")}handleBtnBlur(){this.like.classList.remove("like_focused-pressed"),this.like.classList.remove("like_focused")}}document.querySelectorAll(".js-like").forEach((e=>new t(e)))},64:()=>{class t{constructor(e){if(this.slider=document.getElementById(e.dataset.sliderId),!this.slider)return;this.start=e.querySelector(".range-label__start"),this.end=e.querySelector(".range-label__end"),this.observer=new MutationObserver(this.handleSliderChangeAttrs.bind(this)),this.observer.observe(this.slider,{attributes:!0}),this.formater=new Intl.NumberFormat(e.dataset.formaterLang,{maximumFractionDigits:t.calcDecimalPlaces(+e.dataset.step),minimumFractionDigits:0,...e.dataset.formaterOpt?JSON.parse(e.dataset.formaterOpt):{style:"currency",currency:"RUB"}});const s=e.dataset;this.max=+s.max,this.min=+s.min,this.step=+s.step,this.handleSliderChangeAttrs()}handleSliderChangeAttrs(){this.updateStartValue(this.format(this.calcValue(this.slider.dataset.bsp))),this.updateEndValue(this.format(this.calcValue(this.slider.dataset.bep)))}updateStartValue(t){this.start.innerText=t}updateEndValue(t){this.end.innerText=t}format(t){return this.formater.format(t).replace(/\s(?!\d)/,"")}calcValue(t){return Math.min(this.max,Math.floor(t*(this.max-this.min+this.step)/this.step)*this.step+this.min)}static calcDecimalPlaces(t){const e=String(t),s=e.indexOf(".");return-1===s?0:e.slice(s+1).length}}document.querySelectorAll(".range-label").forEach((e=>new t(e)))},119:()=>{const t=(t,e)=>(...s)=>t()&&e(...s),e=(...t)=>t.reduceRight(((t,e)=>(...s)=>t(e(...s)))),s=(t,e)=>()=>t.style.width=100*(e.pb()+e.getRelBw()/2)/e.getRatio()+"%",i=(t,e)=>s=>{const i=t.getBoundingClientRect();return(s.x-i.x-e.getShift()+e.b().offset)/i.width},n=(t,e)=>s=>{const i=Math.min(e.b().max,Math.max(s,e.b().min));return t.style.left=100*i+"%",e.setB(i),i};window.addEventListener("load",(()=>document.querySelectorAll(".js-range-slider").forEach((a=>(a=>{const r=a.querySelector(".js-range-slider__container"),o=a.querySelector(".js-range-slider__body"),l=a.querySelector(".js-range-slider__button_start-range"),h=a.querySelector(".js-range-slider__button_end-range"),d=a.querySelector(".js-range-slider__progress-bar_start"),c=a.querySelector(".js-range-slider__progress-bar_end"),u=((t,e)=>{const s={isTrigered:!1,shift:0,stretchRatio:1,bs:{max:1,min:0,offset:t},be:{max:1,min:0,offset:0}},i=()=>t/e.getBoundingClientRect().width,n=(t=s.stretchRatio)=>e.style.transform=`scale(${t})`;var a;return n(1),a=i(),s.stretchRatio=1+2*a,n(),(t="bs")=>{const e={getTrigger:()=>s.isTrigered,getShift:()=>s.shift},n={getRatio:()=>s.stretchRatio,getRelBw:()=>i()};return{bs:{b:()=>s.bs,setB(t){s.be.min=t},...e},be:{b:()=>s.be,setB(t){s.bs.max=t},...e},pbs:{pb:()=>s.be.min,...n},pbe:{pb:()=>1-s.bs.max,...n},t:{retrigger(){s.isTrigered=!s.isTrigered},setShift(t){s.shift=t}}}[t]}})(l.getBoundingClientRect().width,o),{bsp:g,bep:p}=a.dataset,b=e(i(r,u("bs")),n(l,u("bs")),(t=>a.dataset.bsp=t),s(d,u("pbs"))),m=e(i(r,u("be")),n(h,u("be")),(t=>a.dataset.bep=t),s(c,u("pbe")));e(n(l,u("bs")),s(d,u("pbs")))(g),e(n(h,u("be")),s(c,u("pbe")))(p),[l,h].forEach((t=>{t.addEventListener("pointerdown",(t=>e=>{var s,i;s=e.target,i=e.pointerId,s.setPointerCapture(i),t.setShift(e.x-e.target.getBoundingClientRect().x),t.retrigger()})(u("t"))),t.addEventListener("lostpointercapture",(t=>()=>t.retrigger())(u("t")))})),l.addEventListener("pointermove",t(u().getTrigger,b)),h.addEventListener("pointermove",t(u().getTrigger,m))})(a)))))},886:()=>{class t{constructor(t){this.textField=t,this.input=this.textField.querySelector(".js-subscription-text-field__input"),this.button=this.textField.querySelector(".js-subscription-text-field__button"),this.bindListeners()}bindListeners(){this.input.addEventListener("focus",this.handleSubscriptionTextFieldInputFocus.bind(this)),this.input.addEventListener("blur",this.handleSubscriptionTextFieldInputBlur.bind(this)),this.button.addEventListener("focus",this.handleSubscriptionTextFieldInputFocus.bind(this)),this.button.addEventListener("blur",this.handleSubscriptionTextFieldInputBlur.bind(this))}handleSubscriptionTextFieldInputFocus(){this.textField.classList.add("subscription-text-field_active")}handleSubscriptionTextFieldInputBlur(){this.textField.classList.remove("subscription-text-field_active")}}document.querySelectorAll(".js-subscription-text-field").forEach((e=>new t(e)))},919:()=>{class t{constructor(t){this.input=t,this.template="31.12.2099",this.index=-1,this.prepValue="",this.amountPoints=0,this.templateValue="",this.inputValue="",this.bindListeners()}bindListeners(){this.input.addEventListener("input",this.handleTextFieldInput.bind(this))}handleTextFieldInput(){const t=this.getValueIndex()-this.index,e=this.input.value.slice(-1);t>0&&this.processInput(e),t<0&&!/\d/.test(e)&&this.removeLastCharacter(),this.index=this.getValueIndex()}processInput(t){return this.updateValues(),/\d/.test(t)?this.handleDigit():"."==t?this.handlePoint():" "==t?this.autocomplete():void this.removeLastCharacter()}updateValues(){this.prepValue=this.trimNonDigit(this.input.value),this.amountPoints=(this.prepValue.match(/\./g)||[]).length,this.templateValue=this.getValue(this.template)[this.amountPoints],this.inputValue=this.getValue(this.prepValue).pop()}handleDigit(){return"."==this.template[this.getValueIndex()]?this.setValue(this.concatString(...this.splitString(this.input.value,this.getValueIndex()),".")):this.inputValue.length==this.templateValue.length&&0==+this.inputValue?this.setValue(this.prepValue.slice(0,this.prepValue.lastIndexOf(this.inputValue))+this.inputValue.slice(0,-1)+"1"):+this.inputValue>+this.templateValue?this.setValue(this.prepValue.slice(0,this.prepValue.lastIndexOf(this.inputValue))+this.templateValue):void 0}handlePoint(){return+this.inputValue>+this.templateValue?this.setValue(this.prepValue.slice(0,-this.templateValue.length)+this.templateValue+"."):0==this.inputValue.length||4==this.templateValue.length?this.setValue(this.prepValue):1==this.inputValue.length&&2==this.templateValue.length?this.addZero():void(2==this.inputValue.length&&this.setLastPoint())}autocomplete(){return 1==this.inputValue.length&&2==this.templateValue.length?this.addZero():this.inputValue.length==this.templateValue.length?this.setLastPoint():4==this.templateValue.length&&2==this.inputValue.length?+this.inputValue>21?this.yearAutocomplete("19"):this.yearAutocomplete("20"):void this.removeLastCharacter()}setLastPoint(){return this.setValue(this.prepValue+".")}addZero(){return this.setValue(("0"==this.inputValue?this.prepValue+"1":this.concatString(...this.splitString(this.prepValue,this.prepValue.length-1),"0"))+".")}getValueIndex(){return this.input.value.length-1}setValue(t){return this.input.value=t}splitString(t,e){return[t.slice(0,e),t.slice(e)]}concatString(t,e,s=""){return t+s+e}trimNonDigit(t){return t.replace(/[^\d]+$/,"")}removeLastCharacter(){return this.setValue(this.input.value.slice(0,-1))}getValue(t){return t.match(/[^.]+(?=\.|$)/g)||[""]}yearAutocomplete(t){return this.setValue(this.concatString(...this.splitString(this.prepValue,this.prepValue.lastIndexOf(this.inputValue)),t))}}document.querySelectorAll(".js-text-field_masked").forEach((e=>new t(e)))},148:(t,e,s)=>{var i={"./about-room/about-room.sass":841,"./big-button/big-button.sass":166,"./bordered-button/bordered-button.js":704,"./bordered-button/bordered-button.sass":176,"./bullet-list/bullet-list.sass":986,"./cal/Tables.js":845,"./cal/cal.js":972,"./cal/cal.sass":811,"./card-reg/card-reg.sass":231,"./card-search-room/card-search-room.sass":599,"./check-list/check-list.js":403,"./check-list/check-list.sass":476,"./check/check.sass":238,"./comment/comment.sass":997,"./date-dropdown/date-dropdown.js":645,"./date-dropdown/date-dropdown.sass":278,"./dropdown/dropdown.js":257,"./dropdown/dropdown.sass":624,"./dropdown/glossary/Glossary.js":226,"./dropdown/glossary/glossarys.js":943,"./filter-date-dropdown/filter-date-dropdown.js":200,"./filter-date-dropdown/filter-date-dropdown.sass":755,"./impressions/impressions.js":270,"./impressions/impressions.sass":953,"./like/like.js":881,"./like/like.sass":95,"./pagination/pagination.sass":190,"./primary-button/primary-button.sass":980,"./radio/radio.sass":115,"./range-label/range-label.js":64,"./range-label/range-label.sass":766,"./range-slider/range-slider.js":119,"./range-slider/range-slider.sass":729,"./rate/rate.sass":860,"./rich-check/rich-check.sass":60,"./subscription-text-field/subscription-text-field.js":886,"./subscription-text-field/subscription-text-field.sass":955,"./text-button/text-button.sass":361,"./text-field/text-field.sass":243,"./text-field/text-field_masked.js":919,"./toggle/toggle.sass":902,"./watermark/watermark.sass":347};function n(t){var e=a(t);return s(e)}function a(t){if(!s.o(i,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return i[t]}n.keys=function(){return Object.keys(i)},n.resolve=a,t.exports=n,n.id=148},79:(t,e,s)=>{var i={"./bordered-button/bordered-button.js":704,"./cal/Tables.js":845,"./cal/cal.js":972,"./check-list/check-list.js":403,"./date-dropdown/date-dropdown.js":645,"./dropdown/dropdown.js":257,"./dropdown/glossary/Glossary.js":226,"./dropdown/glossary/glossarys.js":943,"./filter-date-dropdown/filter-date-dropdown.js":200,"./impressions/impressions.js":270,"./like/like.js":881,"./range-label/range-label.js":64,"./range-slider/range-slider.js":119,"./subscription-text-field/subscription-text-field.js":886,"./text-field/text-field_masked.js":919};function n(t){var e=a(t);return s(e)}function a(t){if(!s.o(i,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return i[t]}n.keys=function(){return Object.keys(i)},n.resolve=a,t.exports=n,n.id=79},654:(t,e,s)=>{var i={"./about-room/about-room.sass":841,"./big-button/big-button.sass":166,"./bordered-button/bordered-button.sass":176,"./bullet-list/bullet-list.sass":986,"./cal/cal.sass":811,"./card-reg/card-reg.sass":231,"./card-search-room/card-search-room.sass":599,"./check-list/check-list.sass":476,"./check/check.sass":238,"./comment/comment.sass":997,"./date-dropdown/date-dropdown.sass":278,"./dropdown/dropdown.sass":624,"./filter-date-dropdown/filter-date-dropdown.sass":755,"./impressions/impressions.sass":953,"./like/like.sass":95,"./pagination/pagination.sass":190,"./primary-button/primary-button.sass":980,"./radio/radio.sass":115,"./range-label/range-label.sass":766,"./range-slider/range-slider.sass":729,"./rate/rate.sass":860,"./rich-check/rich-check.sass":60,"./subscription-text-field/subscription-text-field.sass":955,"./text-button/text-button.sass":361,"./text-field/text-field.sass":243,"./toggle/toggle.sass":902,"./watermark/watermark.sass":347};function n(t){var e=a(t);return s(e)}function a(t){if(!s.o(i,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return i[t]}n.keys=function(){return Object.keys(i)},n.resolve=a,t.exports=n,n.id=654},987:(t,e,s)=>{"use strict";const i=(t=s(148))=>{t.keys().forEach((e=>t(e)))};i(s(654)),i(s(79))}},s={};function i(t){var n=s[t];if(void 0!==n)return n.exports;var a=s[t]={exports:{}};return e[t](a,a.exports,i),a.exports}i.m=e,t=[],i.O=(e,s,n,a)=>{if(!s){var r=1/0;for(h=0;h<t.length;h++){for(var[s,n,a]=t[h],o=!0,l=0;l<s.length;l++)(!1&a||r>=a)&&Object.keys(i.O).every((t=>i.O[t](s[l])))?s.splice(l--,1):(o=!1,a<r&&(r=a));o&&(t.splice(h--,1),e=n())}return e}a=a||0;for(var h=t.length;h>0&&t[h-1][2]>a;h--)t[h]=t[h-1];t[h]=[s,n,a]},i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t={466:0,176:0};i.O.j=e=>0===t[e];var e=(e,s)=>{var n,a,[r,o,l]=s,h=0;for(n in o)i.o(o,n)&&(i.m[n]=o[n]);if(l)var d=l(i);for(e&&e(s);h<r.length;h++)a=r[h],i.o(t,a)&&t[a]&&t[a][0](),t[r[h]]=0;return i.O(d)},s=self.webpackChunkfsd=self.webpackChunkfsd||[];s.forEach(e.bind(null,0)),s.push=e.bind(null,s.push.bind(s))})();var n=i.O(void 0,[176],(()=>i(987)));n=i.O(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,